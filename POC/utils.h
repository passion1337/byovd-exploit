#pragma once 

#include "native.h"
#include <string>
#include <vector>

namespace utils
{
	__forceinline PVOID UAlloc(size_t size, DWORD Access = PAGE_READWRITE)
	{
		PVOID buffer = VirtualAlloc(0, size, MEM_RESERVE | MEM_COMMIT, Access);
		return buffer;
	}

	__forceinline bool UFree(PVOID address)
	{
		return VirtualFree(address, 0, MEM_RELEASE);
	}

	std::string GenRandomStr();

	std::string GenTempPath();

	bool CreateFileFromMemory(const std::string& path, void* data, size_t size);

	bool DeleteFileFromDisk(const std::string& path);

	bool ReadFileFromMemory(const std::string& path, void* data, size_t dataSize);

	PVOID Ntqsi(ULONG klass);

	PVOID GetKernelModule(LPCSTR moduleName, SIZE_T* size);

	bool GetPhysicalMemoryRange(std::vector<std::pair<ULONG_PTR, ULONG>>* out);
}